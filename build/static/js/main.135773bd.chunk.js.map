{"version":3,"sources":["keys.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","API_KEY","BASE_URL","api","key","keys","base","App","_useState","useState","_useState2","Object","slicedToArray","query","setQuery","_useState3","_useState4","weather","setWeather","react_default","a","createElement","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","fetch","concat","then","res","json","results","console","log","name","sys","country","d","date","String","window","Date","slice","dataBuild","Math","round","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"wEAAAA,EAAOC,QAAU,CACbC,QAAS,mCACTC,SAAU,oOCERC,SAAM,CACVC,IAAKC,IAAKJ,QACVK,KAAMD,IAAKH,WA+DEK,MA5Df,WAEE,IAFaC,EASaC,mBAAS,IATtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GASNK,EATMH,EAAA,GASCI,EATDJ,EAAA,GAAAK,EAUiBN,mBAAS,IAV1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAUNE,EAVMD,EAAA,GAUGE,EAVHF,EAAA,GAwBb,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UACoB,oBAAhBL,EAAQM,KACXN,EAAQM,KAAKC,KAAO,GAClB,UAAY,WAAa,OAE/BL,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLC,YAAY,YACZJ,UAAU,aACVK,SAAU,SAACC,GAAD,OAAOd,EAASc,EAAEC,OAAOC,QACnCA,MAAOjB,EACPkB,WA3BK,SAACH,GACA,UAAVA,EAAExB,KACJ4B,MAAK,GAAAC,OAAI9B,EAAIG,KAAR,cAAA2B,OAAyBpB,EAAzB,wBAAAoB,OAAqD9B,EAAIC,MAC3D8B,KAAK,SAACC,GAAD,OAASA,EAAIC,SAElBF,KAAK,SAACG,GACLvB,EAAS,IACTI,EAAWmB,GACXC,QAAQC,IAAIF,SAsBU,oBAAhBpB,EAAQM,KACdJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYL,EAAQuB,KAAnC,KAA2CvB,EAAQwB,IAAIC,SACvDvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QA3CT,SAACqB,GACjB,IAAIC,EAAOC,OAAO,IAAIC,OAAOC,MAE7B,OADAH,EAAOA,EAAKI,MAAM,EAAG,IAyCYC,CAAU,IAAIF,OACrC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAe4B,KAAKC,MAAMlC,EAAQM,KAAKC,MAAtD,SACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWL,EAAQA,QAAQ,GAAGM,SAKnD,MClDK6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA3B,EAAA,GAAAM,KAAAqB,EAAAC,KAAA,UAAqBtB,KAAK,SAAAuB,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhD,EAAAC,EAAAC,cAACF,EAAAC,EAAMgD,WAAP,KACEjD,EAAAC,EAAAC,cAACgD,EAAD,QAOJjB","file":"static/js/main.135773bd.chunk.js","sourcesContent":["module.exports = {\n    API_KEY: \"f92b4c904dfa8c9a535d1b52c9160e50\",\n    BASE_URL: \"https://api.openweathermap.org/data/2.5/\"\n}","import React, { useState } from 'react';\nimport keys from './keys'\nimport './App.css';\n\nconst api = {\n  key: keys.API_KEY,\n  base: keys.BASE_URL\n}\n//\nfunction App() {\n\n  const dataBuild = (d) => {\n    let date = String(new window.Date());\n    date = date.slice(3, 15);\n    return date;\n  }\n\n  // hook number1 เอาไว้เก็บข้อมูลในช่อง search\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n        .then((res) => res.json())\n        // .then((response) => response.json())\n        .then((results) => {\n          setQuery(\"\");\n          setWeather(results);\n          console.log(results);\n        })\n    }\n  }\n\n  return (\n    <div className={\n      typeof weather.main != \"undefined\"\n        ? weather.main.temp > 18\n          ? \"App hot\" : \"App cold\" : \"App\"\n    }>\n      <main>\n        <div className=\"search-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Search...\"\n            className=\"search-bar\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-container\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dataBuild(new Date())}</div>\n              <div className=\"weather-container\">\n                <div className=\"temperature\">{Math.round(weather.main.temp)}°C</div>\n                <div className=\"weather\">{weather.weather[0].main}</div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}